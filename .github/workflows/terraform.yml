name: Terraform

on:
  pull_request:
    branches:
      - master
  push:

env:
  tf_folder: tf-project
  ssh_folder: ssh_key_folder
  ssh_file: id_rsa
  aws-region: "${{ secrets.AWS_REGION }}"
  # root_folder: "${{ runner.workspace }}"

jobs:
  plan:
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "${{ env.tf_folder }}"
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: AWS Credentials - Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "${{ secrets.AWS_REGION }}"
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      - name: SSH Key - Configure
        run: |
          mkdir -p ${{ env.ssh_folder }}
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ${{ env.ssh_folder }}/${{ env.ssh_file }}.pub
          chmod 600 ${{ env.ssh_folder }}/${{ env.ssh_file }}.pub -v
        working-directory: "${{ github.workspace }}"

      - name: Terraform - Init
        id: init
        run: terraform init

      - name: Terraform - Plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        # continue-on-error: true

      # - name: Pull Request Comment
      #   uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       })
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
      #       })

      #       const output = `#### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
      #       #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>

      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`terraform\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>`;

      #       if (botComment) {
      #         github.rest.issues.updateComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #           body: output
      #         })
      #       } else {
      #         github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: output
      #         })
      #       }

      - name: Terraform Status
        if: steps.plan.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.init.outcome == 'failure' || steps.fmt.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
